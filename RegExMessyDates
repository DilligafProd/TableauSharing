Sample Dates:
03/11/2022 12:01
04/12/2022 2:15:00PM
02/22/22 1401
06/14/2022 3:05 PM
09/19/2022 0221
09/18/2022 223
09/28/22 700
07/18/2022 21
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*-*-*-*-* Extract out digits only, remove colons, and remove any seconds values entered *-*-*-*
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*-*-*-*-*-*-*-*-*-*-*-*-*-* [*-*REGEX TIME DIGITS]  *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
IF 
LEN(TRIM(
REGEXP_EXTRACT(
        REGEXP_REPLACE([Episode End Date / Time],'(:)','') //removed colon
                ,'(\s[0-9]+)'))) > 4                       //Is the trimmed lenght over 4?
THEN 
LEFT(
    REGEXP_EXTRACT(
        REGEXP_REPLACE([Episode End Date / Time],'(:)','')
                ,'(\s[0-9]+)'), 
                                LEN(
                                        REGEXP_EXTRACT(
                                                        REGEXP_REPLACE([Episode End Date / Time],'(:)','')
                                        ,'(\s[0-9]+)'))-2) //after removing the colon, keep the digits left after removing the last two numbers
ELSE
REGEXP_EXTRACT(
        REGEXP_REPLACE([Episode End Date / Time],'(:)','') //return just the digits
                ,'(\s[0-9]+)')
END

*-*-*-*-*-*
Above calc returns these values:
03/11/2022 12:01 ==> 1201
04/12/2022 2:15:00PM  ==> 215
02/22/22 1401 ==> 1401
01/15/2022 5:23 AM ==> 523
06/14/2022 3:05 PM ==> 305
09/19/2022 0221 ==> 0221
09/18/2022 223 ==> 223
09/28/22 700 ==> 700
07/18/2022 21 ==> 21

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*-*-*-*-*-*-*-*-*-* Look for PM - add 1200 to value to return 24h value *-*-*-*-*-*-*-*-*-*-*-*
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* format others to 4 digit length *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*-*  [*-*EpisodeStartTime24H]  -*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

IF CONTAINS(UPPER([Episode End Date / Time]),'PM')
THEN
STR(INT([*-*REGEX TIME DIGITS]) + 1200)
ELSE 
LEFT("0000",4 - LEN(TRIM(STR([*-*REGEX TIME DIGITS])))) + TRIM(STR([*-*REGEX TIME DIGITS]))
END

*-*-*-*-*-*
Above calc returns these values:
3/11/2022 12:01 ==> 1201
04/12/2022 2:15:00PM  ==> 1415
02/22/22 1401 ==> 1401
01/15/2022 5:23 AM ==> 0523
06/14/2022 3:05 PM ==> 1505
09/19/2022 0221 ==> 0221
9/8/2022 223 ==> 0223
09/28/22 700 ==> 0700
07/18/2022 21 ==> 0021

*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*-*-*-*-*-*-*-*-*-*-*-*-* Create datetime by extracting year/month/day  *-*-*-*-*-*-*-*-*-*-*-*
*-*-*-*-*-*-*-*-*-*-*-*-* from date and *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* 
*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-* format others to 4 digit length *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*
*-* [*-*EpisodeEndDateTime] *-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*

MAKEDATETIME(
    MAKEDATE(
    IF 
    INT(REGEXP_EXTRACT([Episode End Date / Time],'([0-9]+)\s')) < 2000 //Regex looks for digits to the left of the first space (until it reaches the /)
    THEN INT(REGEXP_EXTRACT([Episode End Date / Time],'([0-9]+)\s')) + 2000
    ELSE INT(REGEXP_EXTRACT([Episode End Date / Time],'([0-9]+)\s'))
    END //Returns YEAR as INT

    ,INT(LEFT("00",2 - LEN(STR(REGEXP_EXTRACT([Episode End Date / Time],'([0-9]+)[\/.\-]')))) 
        + STR(REGEXP_EXTRACT([Episode End Date / Time],'([0-9]+)[\/.\-]'))) //Returns MONTH as INT

    ,INT(LEFT("00",2 - LEN(STR(REGEXP_EXTRACT([Episode End Date / Time],'[\/.\-]([0-9]+)')))) 
        + STR(REGEXP_EXTRACT([Episode End Date / Time],'[\/.\-]([0-9]+)'))) //Returns DATE as INT
    ) //End MakeDate
,
    MAKETIME(
        INT(LEFT([*-*EpisodeStartTime24H],2))
        ,INT(RIGHT([*-*EpisodeStartTime24H],2))
        ,0
            ) //End MakeTime
   ) //End MakeDateTime
